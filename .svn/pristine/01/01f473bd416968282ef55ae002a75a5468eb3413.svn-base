package internal.qaauto.inrunning.tom.betslip;

import internal.qaauto.framework.testCase.webTestsCase.BaseTestCase;
import internal.qaauto.inrunning.tom.InRunningComponent;
import org.apache.commons.lang.StringUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;

import java.awt.*;
import java.util.List;

/**
 * @author rkora on 30/10/2014.
 */
public class BetSlipSelectionImpl extends InRunningComponent implements BetSlipSelection {

    private static final String H4_TAG = "h4";

    private static final String SPAN_TAG = "span";

    private static final String INPUT_TAG = "input";

    private static final String WIN_AMOUNT_TAG = "input";

    private static final String VALUE_ATTRIBUTE = "value";

    private static final int FIRST_SELECTION = 0;

    private static final String COMPETITION_CLASS = "competition";

    private static final String PROPOSITION_CLASS = "proposition";

    private static final String PICK = "Pick";

    private static final String EVEN = "EVEN";

    private static final String BUTTON_TAG = "button";

    private static final String BETSLIP_ERROR_MSG_CLASS = "betslip-error-msg";

    private static final String CLASS_ATTRIBUTE = "class";

    private static final String SUSPENDED_TEXT = "suspended";

    public static final String ELLIPSIS_OVERFLOW_CLASS = "ellipsis-overflow";

    private static final String BORDER_COLOR = "border-color";

    private final By elipsesLocator = new By.ByClassName(ELLIPSIS_OVERFLOW_CLASS);

    private final By messageLocator = new By.ByClassName(BETSLIP_ERROR_MSG_CLASS);

    private final By marketNameLocator = new By.ByClassName(PROPOSITION_CLASS);

    private final By toWinLocator = new By.ByTagName(WIN_AMOUNT_TAG);

    private final By descriptionLocator = new By.ByTagName(H4_TAG);

    private final By priceLocator = new By.ByTagName(SPAN_TAG);

    private final By stakeLocator = new By.ByTagName(INPUT_TAG);

    private final By deleteBetLocator = new By.ByTagName(BUTTON_TAG);

    private final By eventDescLocator = new By.ByClassName(COMPETITION_CLASS);

    public BetSlipSelectionImpl(final WebElement betSlip) {
        setComponent(betSlip);
    }

    @Override
    public String getDescription() {
        final List<WebElement> selectionDescription = getWebElement().findElements(descriptionLocator);
        if (selectionDescription.isEmpty()) {
            return StringUtils.EMPTY;
        }
        String desc = selectionDescription.get(FIRST_SELECTION).getText();
        String selectionDesc = StringUtils.EMPTY;
        final String outcomeDescriptionRegex = "([+-]?\\d+[\\u00BD\\u00BC\\u00BE]?)";//"([a-zA-Z]+)";
        selectionDesc = desc.replaceAll(outcomeDescriptionRegex, "").trim();
        if (selectionDesc.contains(PICK)) {
            selectionDesc = selectionDesc.replace(PICK, "").trim();
        }
        if (selectionDesc.contains(EVEN)) {
            selectionDesc = selectionDesc.replace(EVEN, "").trim();
        }
        return selectionDesc;
    }

    @Override
    public String getPrice() {
        final List<WebElement> selectionDescription = getWebElement().findElements(priceLocator);
        if (selectionDescription.isEmpty()) {
            return StringUtils.EMPTY;
        }
        return selectionDescription.get(1).getText();
    }

    @Override
    public void delete() {
        final List<WebElement> selectionDescription = getWebElement().findElements(deleteBetLocator);
        if (selectionDescription.isEmpty()) {
            BaseTestCase.reporter.info("Delete bet locator is not displayed");
            return;
        }
        selectionDescription.get(FIRST_SELECTION).click();
    }

    @Override
    public boolean isDisplayed() {
        return getWebElement().isDisplayed();
    }

    @Override
    public void setRiskAmount(final String amount) {
        final List<WebElement> riskWebElement = getWebElement().findElements(stakeLocator);
        if (riskWebElement.isEmpty()) {
            BaseTestCase.reporter.info("Risk field is not displayed");
            return;
        }
        riskWebElement.get(FIRST_SELECTION).clear();
        riskWebElement.get(FIRST_SELECTION).sendKeys(amount);
    }

    @Override
    public String getToWinValue() {
        final WebElement toWinWebElement = getWebElement().findElements(toWinLocator).get(1);
        return toWinWebElement.getAttribute(VALUE_ATTRIBUTE);
    }

    @Override
    public void setToWinAmount(final String amount) {
        final WebElement toWin = getWebElement().findElements(toWinLocator).get(1);
        toWin.click();
        toWin.sendKeys(amount);
    }

    @Override
    public String getRiskValue() {
        final List<WebElement> stake = getWebElement().findElements(stakeLocator);
        if (stake.isEmpty()) {
            return null;
        }
        return stake.get(FIRST_SELECTION).getAttribute(VALUE_ATTRIBUTE);
    }

    @Override
    public String getSelectionEventDescription() {
        final List<WebElement> eventDesc = getWebElement().findElements(eventDescLocator);
        if (eventDesc.isEmpty()) {
            return null;
        }
        final String eventDescription = eventDesc.get(FIRST_SELECTION).getText();
        return eventDescription;
    }

    @Override
    public String getMarketTitle() {
        final List<WebElement> marketName = getWebElement().findElements(marketNameLocator);
        if (marketName.isEmpty()) {
            return null;
        }
        final String marketTitle = marketName.get(FIRST_SELECTION).getText();
        return marketTitle;
    }

    @Override
    public String getMessage() {
        final List<WebElement> errorMsgWebElement = getWebElement().findElements(messageLocator);
        if (errorMsgWebElement.isEmpty()) {
            return StringUtils.EMPTY;
        }
        final String selectionMessage = errorMsgWebElement.get(FIRST_SELECTION).getText();
        return selectionMessage;
    }

    @Override
    public String getDisplayedArrow() {
        final List<WebElement> priceDecreaseWebElement = getWebElement().findElements(By.className("price-decrease"));
        final List<WebElement> priceIncreaseWebElement = getWebElement().findElements(By.className("price-increase"));
        String priceChange = StringUtils.EMPTY;
        if (!priceDecreaseWebElement.isEmpty()) {
            priceChange = "red";
        } else if (!priceIncreaseWebElement.isEmpty()) {
            priceChange = "green";
        }
        return priceChange;
    }

    @Override
    public boolean isSelectionSuspended() {
        return getWebElement().getAttribute(CLASS_ATTRIBUTE).contains(SUSPENDED_TEXT);
    }

    @Override
    public boolean isElipsesApplied() {
        final List<WebElement> elipsesWebElement = getWebElement().findElements(elipsesLocator);
        if (elipsesWebElement.isEmpty()) {
            return false;
        }
        final String outcomeTextLocator =
                "jQuery('#live-betslip > form > ul > li > h4 > span.ellipsis-overflow:contains(" + getDescription() + ")')";
        final boolean isElipsesDisplayed = (Boolean) BaseTestCase.webDriver.executeJavascript(
                "return " + outcomeTextLocator + ".width() < " + outcomeTextLocator + "[0].scrollWidth;");
        return isElipsesDisplayed;
    }

    @Override
    public String getMessageBorderColor() {
        final List<WebElement> errorMsgWebElement = getWebElement().findElements(messageLocator);
        if (errorMsgWebElement.isEmpty()) {
            return StringUtils.EMPTY;
        }
        final String colorCode=errorMsgWebElement.get(0).getCssValue(BORDER_COLOR);
        String colorName=StringUtils.EMPTY;
        String[] colors = colorCode.substring(4, colorCode.length() - 1 ).split(",");
        Color color = new Color(
                Integer.parseInt(colors[0].trim()),
                Integer.parseInt(colors[1].trim()),
                Integer.parseInt(colors[2].trim())
        );
        if(color.equals(new Color(119, 191, 97))){
            colorName="green";
        }
        else if(color.equals(new Color(203,0,0))){
            colorName="red";
        }
        return colorName;
    }

}
package internal.qaauto.inrunning.framework;

import internal.qaauto.framework.testCase.webTestsCase.BaseTestCase;
import internal.qaauto.inrunning.steps.LiveBettingPageFactory;
import internal.qaauto.inrunning.tom.LiveBettingPage;
import internal.qaauto.inrunning.tom.Utils;
import internal.qaauto.inrunning.tom.coupons.LeftNavLiveNowEvent;
import internal.qaauto.inrunning.tom.markets.Market;
import internal.qaauto.sportsbook.webservice.eventpubpxp.entities.interfaces.Event;
import internal.qaauto.sportsbook.webservice.eventpubpxp.entities.interfaces.Line;
import internal.qaauto.sportsbook.webservice.eventpubpxp.tom.EventPubPXPManager;
import org.apache.commons.configuration.ConfigurationException;

import java.io.IOException;
import java.util.LinkedList;
import java.util.List;

/**
 * @author rkora on 16/10/2014.
 */
public class InRunningBaseStep extends BaseTestCase {

    public Event getEvent(){
        return getScenarioContext().getEvent();
    }

    public ScenarioContext getScenarioContext(){
        return InRunningTestCase.getScenarioContext();
    }


    public ExecutionContext getExecutionContext(){
        return InRunningTestCase.getExecutionContext();
    }
    public EventPubPXPManager getManager() throws ConfigurationException {
        return InRunningTestCase.getExecutionContext().getManager();
    }

    public void closeObsoleteEvents() throws IOException, ConfigurationException {
        getScenarioContext().cleanUpEvents();
    }

    public LiveBettingPage getLiveBettingPage(){
        return LiveBettingPageFactory.getLiveBettingPageImpl();
    }

    public List<Line> getLinesFromEvent(){
        final Event event = getEvent();
        if(event.getLines() == null){
            return null;
        }
        return event.getLines();
    }

    public List<String> getLineDescriptionsFromEvent(){
        final List<Line> lines = getLinesFromEvent();
        if(lines == null){
            return null;
        }
        final List<String> lineDescriptions = new LinkedList<String>();
        for(final Line line : lines){
            lineDescriptions.add(line.getDisplayText());
        }
        return lineDescriptions;
    }

    public Line getLineByDescription(final String lineDisplayText){
        final List<Line> lines = getLinesFromEvent();
        if(lines == null){
            return null;
        }

        for(final Line line : lines){
            if(lineDisplayText.equals(line.getDisplayText())){
                return line;
            }
        }
        return null;

    }

    public LeftNavLiveNowEvent getLatestLiveNowEvent(){
        final Event event = getEvent();
        final Utils utils = new Utils();
        final String eventName = utils.getEventName(event);
        final LeftNavLiveNowEvent liveNowEvent = getLiveBettingPage().getLiveNowEventByName(event.getSport(), eventName);
        return liveNowEvent;
    }

    public Market getMarketByTitle(final String marketTitle){
        return getLiveBettingPage().getMarketByTitle(marketTitle);
    }
}

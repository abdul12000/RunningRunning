package internal.qaauto.inrunning.StepCandidatesHelperMethods;

import internal.qaauto.framework.Assert;
import internal.qaauto.inrunning.framework.InRunningBaseStep;
import internal.qaauto.inrunning.tom.coupons.LeftNavLiveNowEvent;
import internal.qaauto.inrunning.tom.coupons.LeftNavUpcomingEvent;
import internal.qaauto.inrunning.tom.leftnav.LeftNavEventsComponent;
import internal.qaauto.inrunning.tom.leftnav.LiveNowEventsComponent;
import internal.qaauto.inrunning.tom.leftnav.Sport;
import internal.qaauto.inrunning.tom.leftnav.UpcomingEventsComponent;
import internal.qaauto.inrunning.tom.markets.MarketOutcome;
import internal.qaauto.inrunning.utils.LeftNavComponents;

import java.util.List;

/**
 * Created by Harish Renukunta on 22/10/2014.
 */
public class LeftNavEventStepsHelperMethods extends InRunningBaseStep {

    private final static String ODDS_MATCH = "Odds match. Price:%s";

    private final static String ODDS_MISMATCH = "Odds mismatch. Outcome desc:%s Expected:%s Actual:%s";

    private final static String EVENT_FOUND = "Coupon with title %s found";

    private final static String EVENT_NOT_FOUND = "Coupon with title %s not found";

    private final static String SPORT_GROUP_COLLAPSED = "Sport group %s in %s collapsed";

    private final static String SPORT_GROUP_EXPANDED = "Sport group %s in %s expanded";

    private final static String SPORT_GROUP_FOUND = "Sport group %s in %s found";

    private final static String SPORT_GROUP_NOT_FOUND = "Sport group %s in %s not found";

    private UpcomingEventsComponent getUpcomingEventsComponent() {
        return getLiveBettingPage().getUpcomingEventsComponent();
    }

    private LiveNowEventsComponent getLiveNowCouponsComponent() {
        return getLiveBettingPage().getLiveNowCouponsComponent();
    }

    public LeftNavLiveNowEvent getLeftNavLiveNowEventByGameID(final String gameID) {
        LiveNowEventsComponent liveNowCouponsComponent = getLiveNowCouponsComponent();
        LeftNavLiveNowEvent liveNowCoupon = (LeftNavLiveNowEvent) liveNowCouponsComponent.getCouponByGameID(gameID);
        return liveNowCoupon;
    }

    public LeftNavUpcomingEvent getLeftNavUpcomingEventByTitle(final String title) {
        UpcomingEventsComponent upcomingCouponsComponent = getUpcomingEventsComponent();
        return upcomingCouponsComponent.getUpcomingEventByTitle(title);
    }

    private Sport getSportByTitle(final String sport) {
        final LeftNavEventsComponent eventsComponent = getLiveBettingPage().getUpcomingEventsComponent();
        return eventsComponent.getSportByTitle(sport);
    }

    public void verifyOddsOfOutcome(final MarketOutcome marketOutcome, final String expectedOdd) {
        final String outcomePrice = marketOutcome.getPrice();
        Assert.assertEquals(expectedOdd, outcomePrice, String.format(ODDS_MATCH, expectedOdd),
                String.format(ODDS_MISMATCH, marketOutcome.getDescription(), expectedOdd,
                        outcomePrice));
    }

    public void verifyLiveNowEventExist(final String sport, final String couponTitle) {
        final LeftNavLiveNowEvent liveNowCoupon =
                getLiveBettingPage().getLiveNowCouponsComponent().getLiveNowEventByName(
                        sport, couponTitle);
        Assert.assertNotNull(liveNowCoupon, String.format(EVENT_FOUND, couponTitle),
                String.format(EVENT_NOT_FOUND, couponTitle));
    }

    public boolean isSportGroupCollapsed(final Sport sportGroup) {
        return sportGroup.isCollapsed();
    }

    public void verifySportGroupInLiveNowCollapsed(final String sport) {
        final LiveNowEventsComponent liveNowComponent = getLiveBettingPage().getLiveNowCouponsComponent();
        final Sport sportContainer = liveNowComponent.getSportByTitle(sport);
        verifySportGroupExist(sportContainer, sport);
        final String menuComponent = LeftNavComponents.LIVE_NOW_EVENTS_COMPONENT.getLabel();
        Assert.assertTrue(isSportGroupCollapsed(sportContainer), String.format(SPORT_GROUP_COLLAPSED, sport, menuComponent),
                String.format(SPORT_GROUP_EXPANDED, sport, menuComponent));
    }

    public void verifySportGroupExist(final Sport sportContainer, final String sport) {
        Assert.assertNotNull(sportContainer, String.format(SPORT_GROUP_FOUND, sport),
                String.format(SPORT_GROUP_NOT_FOUND, sport));
    }

    public void verifySportGroupInLiveNowExpanded(final String sport) {
        final LiveNowEventsComponent liveNowComponent = getLiveBettingPage().getLiveNowCouponsComponent();
        final Sport sportContainer = liveNowComponent.getSportByTitle(sport);
        verifySportGroupExist(sportContainer, sport);
        final String menuComponent = LeftNavComponents.LIVE_NOW_EVENTS_COMPONENT.getLabel();
        Assert.assertTrue(!isSportGroupCollapsed(sportContainer), String.format(SPORT_GROUP_EXPANDED, sport, menuComponent),
                String.format(SPORT_GROUP_COLLAPSED, sport, menuComponent));
    }

    public void collapseSportGroupInUpcomingEventsComponent(final String sport) {
        final Sport sportGroup = getSportByTitle(sport);
        sportGroup.collapse();
    }

    public void expandSportGroupInUpcomingEventsComponent(final String sport) {
        final LeftNavEventsComponent eventsComponent = getLiveBettingPage().getUpcomingEventsComponent();
        Sport sportGroup = eventsComponent.getSportByTitle(sport);
        sportGroup.expand();
    }

    public void verifySportGroupInUpcomingEventsComponentIsCollapsed(final String sport) {
        final Sport sportGroup = getSportByTitle(sport);
        final String menuComponent = LeftNavComponents.UPCOMING_EVENTS_COMPONENT.getLabel();
        Assert.assertTrue(sportGroup.isCollapsed(), String.format(SPORT_GROUP_COLLAPSED, sport, menuComponent),
                String.format(SPORT_GROUP_EXPANDED, sport, menuComponent));
    }

    public void verifySportGroupInUpcomingEventsComponentIsExpanded(final String sport) {
        final Sport sportGroup = getSportByTitle(sport);
        final String menuComponent = LeftNavComponents.UPCOMING_EVENTS_COMPONENT.getLabel();
        Assert.assertTrue(!sportGroup.isCollapsed(), String.format(SPORT_GROUP_EXPANDED, sport, menuComponent),
                String.format(SPORT_GROUP_COLLAPSED, sport, menuComponent));
    }

    public void verifySportGroupsInUpcomingEventsComponentOtherThanSpecifiedAreCollapsed(final String sport) {
        final LeftNavEventsComponent eventsComponent = getLiveBettingPage().getUpcomingEventsComponent();
        final List<Sport> sportGroups = eventsComponent.getSportGroups();
        for (Sport sportGroup : sportGroups) {
            if (!sportGroup.getTitle().equals(sport)) {
                verifySportGroupInUpcomingEventsComponentIsCollapsed(sportGroup.getTitle());
            }
        }
    }

}

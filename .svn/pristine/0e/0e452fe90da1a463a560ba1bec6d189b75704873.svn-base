package internal.qaauto.inrunning.steps;

import internal.qaauto.framework.Assert;
import internal.qaauto.inrunning.framework.InRunningBaseStep;
import internal.qaauto.inrunning.tom.LiveBettingPage;
import internal.qaauto.inrunning.tom.Utilties.OutcomeStatus;
import internal.qaauto.inrunning.tom.betslip.BetSlip;
import internal.qaauto.inrunning.tom.betslip.BetSlipSelection;
import internal.qaauto.inrunning.tom.betslip.QuickBetMode;
import internal.qaauto.inrunning.tom.markets.Market;
import internal.qaauto.inrunning.tom.markets.MarketOutcome;
import internal.qaauto.inrunning.utils.WaitUtils;
import org.apache.commons.lang.StringUtils;
import org.jbehave.core.annotations.*;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;

/**
 * Created by Harish Renukunta on 30/10/2014.
 */
public class BetSlipSteps extends InRunningBaseStep {

    private static final String QBM_ACTIVE = "Quick Bet Mode Active";

    private static final String QBM_IN_ACTIVE = "Quick Bet Mode in active";

    private static final String BETSLIP_DISPLAYED = "Betslip found";

    private static final String BETSLIP_NOT_DISPLAYED = "Betslip not found";

    private static final String RIGHT_NAV_DISPLAYED = "Right nav displayed";

    private static final String RIGHT_NAV_NOT_DISPLAYED = "Right nav not displayed";

    @When("I select OFF in the QBM selector")
    @Given("QBM is in Off state")
    @Aliases(values = { "QBM is in deactivate state" })
    public void quickBetModeOff() {
        getLiveBettingPage().getQuickBetMode().disable();
    }

    @Given("QBM is in active state")
    @When("I select ON in the QBM selector")
    @Aliases(values = { "select ON in the QBM selector" })
    public void quickBetModeOn() {
        getLiveBettingPage().getQuickBetMode().enable();
    }

    @Given("Quick Bet Mode is activated")
    @Then("QBM is activated")
    public void verifyQBMIsActivated() {
        final QuickBetMode qbm = getLiveBettingPage().getQuickBetMode();
        qbm.enable();
        Assert.assertTrue(qbm.isActive(), QBM_ACTIVE, QBM_IN_ACTIVE);
    }

    @Given("HTML5 Live Client with QBM as wager placement mode")
    public void html5LiveClientWithQBMOn() {
        getLiveBettingPage().go();
        verifyQBMIsActivated();
    }

    @Then("Betslip is not displayed in the right nav")
    public void verifyBetSlipIsInNotDisplayed() {
        final BetSlip betSlip = getLiveBettingPage().getBetSlip();
        Assert.assertTrue(betSlip == null, BETSLIP_NOT_DISPLAYED, BETSLIP_DISPLAYED);
    }

    @Then("Betslip mode is activated and Betslip is displayed in the right nav")
    public void verifyBetSlipIsDisplayed() {
        final BetSlip betSlip = getLiveBettingPage().getBetSlip();
        Assert.assertTrue(betSlip.getWebElement().isDisplayed(), BETSLIP_DISPLAYED, BETSLIP_NOT_DISPLAYED);
    }

    @Given("wager placement selector in the right nav")
    public void verifyQBMInRightNav() {
        final LiveBettingPage liveBettingPage = getLiveBettingPage();
        final By rightNavLocator = new By.ByCssSelector("#rightCol");
        final WebElement rightNav = liveBettingPage.getChildWebElement(rightNavLocator);
        Assert.assertTrue(rightNav.isDisplayed(), RIGHT_NAV_DISPLAYED, RIGHT_NAV_NOT_DISPLAYED);
    }

    @Then("$Selection of $MarketTitle should be displayed in the betslip")
    public void verifyBetAddedToBetSlip(@Named("Selection") final String selection,
            @Named("<MarketTitle>") final String marketTitle) {
        BetSlip betSlip = getLiveBettingPage().getBetSlip();
        BetSlipSelection betSlipSelection = betSlip.getSelectionByDescription(selection);
        final Market market = getLiveBettingPage().getMarketByTitle(marketTitle);
        final MarketOutcome marketOutcome = market.getOutcomeByDescription(selection);
        boolean isBetDisplayedInBetslip = Boolean.TRUE;
        String outcomeDescription = StringUtils.EMPTY;
        final String marketName = getEvent().getLines().get(0).getMarketName();
        if (marketName.equals("Total") || marketName.equals("Point Spread")) {
            outcomeDescription = marketOutcome.getOutcomeDescription() + " " + marketOutcome.getHandicapValue();
        } else {
            outcomeDescription = marketOutcome.getOutcomeDescription();
        }
        if (!outcomeDescription.equals(betSlipSelection.getDescription())) {
            isBetDisplayedInBetslip = Boolean.FALSE;
            reporter.info("Expected Bet description is not Displayed");
        }
        if (!marketOutcome.getPrice().equals(betSlipSelection.getPrice())) {
            isBetDisplayedInBetslip = Boolean.FALSE;
            reporter.info("Expected Bet price is not Displayed");
        }
        Assert.assertTrue(isBetDisplayedInBetslip && (betSlip.getSelectionCount() == 1),
                String.format("Expected bet is displayed in the betslip :%s", outcomeDescription),
                String.format("Expected bet is not displayed in the betslip:%s", outcomeDescription));

    }

    @When("player delete the $Selection in the betslip")
    public void deleteTheSelection(@Named("Selection") final String selection) {
        BetSlipSelection betSlipSelection = getLiveBettingPage().getBetSlip().getSelectionByDescription(selection);
        if (betSlipSelection != null) {
            betSlipSelection.delete();
        }
    }

    @Then("the $Selection is removed from the betslip")
    public void verifySelectionIsRemoved(@Named("Selection") final String selection) {
        BetSlip betSlip = getLiveBettingPage().getBetSlip();
        BetSlipSelection betSlipSelection = betSlip.getSelectionByDescription(selection);
        Assert.assertTrue(betSlipSelection == null, "Bet is not displayed in the betslip",
                "Bet is displayed in the betslip");
    }

    @Then("$Selection is displayed in the betslip")
    public void verifySelectionInTheBetSlip(@Named("Selection2") final String selection) {
        BetSlipSelection betSlipSelection = getLiveBettingPage().getBetSlip().getSelectionByDescription(selection);
        Assert.assertTrue(betSlipSelection.getDescription().equals(selection),
                String.format("Selection is Displayed in the betslip : %s", selection),
                String.format("Selection is Displayed in the betslip : %s", selection));
    }

    @Then("Selection description <Selection> should display in the betslip")
    public void verifySelectionDescriptionInBetSlip(@Named("Selection") final String selection) {
        BetSlipSelection betSlipSelection = getLiveBettingPage().getBetSlip().getSelectionByDescription(selection);
        Assert.assertTrue(betSlipSelection.getDescription().equalsIgnoreCase(selection),
                String.format("Selection is Displayed in the betslip : %s", selection),
                String.format("Selection is Displayed in the betslip : %s", selection));
    }

    @When("player introduce the <risk> amount to the $Selection")
    public void setRiskAmount(@Named("risk") final String amount, @Named("Selection") final String selection) {
        BetSlipSelection betSlipSelection = getLiveBettingPage().getBetSlip().getSelectionByDescription(selection);
        betSlipSelection.setRiskAmount(amount);
    }

    @When("player introduce the <ToWin> amount to the $Selection")
    public void setToWinAmount(@Named("ToWin") final String amount, @Named("Selection") final String selection) {
        BetSlipSelection betSlipSelection = getLiveBettingPage().getBetSlip().getSelectionByDescription(selection);
        betSlipSelection.setToWinAmount(amount);
    }

    @When("enter the risk $Amount to $Selection,$Selection2")
    public void setRiskAmount2(@Named("Amount") final String amount, @Named("Selection") final String selection,
            @Named("Selection2") final String selection2) {
        BetSlip betSlip = getLiveBettingPage().getBetSlip();
        betSlip.getSelectionByDescription(selection).setRiskAmount(amount);
        betSlip.getSelectionByDescription(selection2).setRiskAmount(amount);

    }

    @Then("Total $Stake will be displayed in the bottom of the betslip")
    public void verifyTotalStake(@Named("Stake") final String stake) {
        BetSlip betslip = getLiveBettingPage().getBetSlip();
        Assert.assertTrue(betslip.getTotalStake().equals(stake), String.format("Total stake is displayed :%s", stake),
                String.format("Total stake is not displayed :%s", stake));
    }

    @Then("the amount selected by default as stake amount is $2")
    public void verifyDefaultStake(final String amount) {
        final QuickBetMode qbm = getLiveBettingPage().getQuickBetMode();
        final String defaultStake = qbm.getStake();
        Assert.assertTrue(defaultStake.equals(amount), String.format("Default Stake is displayed :%s", defaultStake),
                String.format("Default Stake is not displayed : %s", defaultStake));

    }

    @When("player clicks on $Amount")
    public void clickOnAmount(@Named("Amount") final int amount) {
        final QuickBetMode qbm = getLiveBettingPage().getQuickBetMode();
        qbm.clickOn(amount);
    }

    @Then("the $Amount selected will be displayed in the default stake field")
    public void verifyStakeAmount(@Named("Amount") final String amount) {
        final QuickBetMode qbm = getLiveBettingPage().getQuickBetMode();
        Assert.assertTrue(qbm.getStake().equals(amount), String.format("Default Stake is displayed :%s", amount),
                String.format("Default Stake is not displayed : %s", amount));

    }

    @When("player introduced $inputValue in the input field")
    public void setStakeAmount(@Named("inputValue") final String value) {
        final QuickBetMode qbm = getLiveBettingPage().getQuickBetMode();
        qbm.setStake(value);
    }

    @Then("<inputValue> should be <Behavior>")
    public void verifyAcceptedBehavior(@Named("inputValue") final String inputValue, @Named("Behavior") final String behavior) {
        final QuickBetMode qbm = getLiveBettingPage().getQuickBetMode();
        final String stakeValue = qbm.getStake();
        String actualBehavior = StringUtils.EMPTY;
        if (stakeValue.equals(inputValue)) {
            actualBehavior = "Accepted";
        } else {
            actualBehavior = "Not Accepted";
        }
        Assert.assertEquals(behavior, actualBehavior, String.format("Expected behavior is :%s", behavior),
                String.format("Actual behavior is :%s", actualBehavior));

    }

    @Then("<ToWin> amount is displayed based on price and the stake value of <Selection>")
    public void verifyToWinAmount(@Named("ToWin") final String toWin, @Named("Selection") final String selection) {
        final BetSlipSelection betSlipSelection = getLiveBettingPage().getBetSlip().getSelectionByDescription(selection);
        Assert.assertEquals(toWin, betSlipSelection.getToWinValue(),
                String.format("Expected To Win Amount is Displayed :%s", toWin),
                String.format("Expected To Win Amount is not Displayed :%s", betSlipSelection.getToWinValue()));
    }

    @Then("<risk> amount is displayed based on price and the stake value of <Selection>")
    public void verifyRiskAmount(@Named("risk") final String risk, @Named("Selection") final String selection) {
        final BetSlipSelection betSlipSelection = getLiveBettingPage().getBetSlip().getSelectionByDescription(selection);
        Assert.assertEquals(risk, betSlipSelection.getRiskValue(),
                String.format("Expected Risk Amount is Displayed :%s", risk),
                String.format("Expected Risk Amount is not Displayed :%s", betSlipSelection.getRiskValue()));
    }

    @Then("Selection <<Selection>> price <Price> should display in the betslip")
    public void verifyPriceInBetslipSelection(@Named("<Selection>") final String selection,
            @Named("Price") final String price) {
        final BetSlipSelection betSlipSelection = getLiveBettingPage().getBetSlip().getSelectionByDescription(selection);
        Assert.assertEquals(price, betSlipSelection.getPrice(),
                String.format("Selection Price is displayed int the Betslip : %s", price),
                String.format("Selection Price : %s is not displayed int the Betslip : %s", price,
                        betSlipSelection.getPrice()));
    }

    @Then("Selection <<Selection>> Should display Event Description <<Description>> should be in the betslip")
    public void verifySelectionEventDescriptionInBetslip(@Named("<Selection>") final String selection,
            @Named("<Description>") final String description) {
        final BetSlipSelection betSlipSelection = getLiveBettingPage().getBetSlip().getSelectionByDescription(selection);
        final String actualEventDescription = betSlipSelection.getSelectionEventDescription();
        Assert.assertEquals(description, actualEventDescription,
                String.format("Event Description is displayed in the Betslip Selection : %s", description),
                String.format("Event Description expected : %s not displayed in the Betslip Selection actual : %s", description,
                        actualEventDescription));
    }

    @Then("Market Title <<MarketTitle>>  for Selection <<Selection>> should be displayed in the bet slip")
    public void verifyMarketTitleInBetslipSelection(@Named("<MarketTitle>") final String marketTitle,
            @Named("<Selection>") final String selection) {
        final BetSlipSelection betSlipSelection = getLiveBettingPage().getBetSlip().getSelectionByDescription(selection);
        final String actualMarketTitle = betSlipSelection.getMarketTitle();
        Assert.assertEquals(marketTitle, actualMarketTitle,
                String.format("Market title : %s is displayed for the Betslip Selection", marketTitle,
                        betSlipSelection.getDescription()),
                String.format(
                        "Actual Market Title :%s \n Expected Market title : %s \n is not displayed for the Betslip Selection",
                        actualMarketTitle, marketTitle,
                        betSlipSelection.getDescription()));
    }

    @Then("Selection <<Selection>> is placed for market title <<MarketTitle>> and the button will react when the process is finished")
    public void verifySelectionPlacedWithQBM(@Named("<Selection>") final String selection,
            @Named("<MarketTitle>") final String marketTitle) {
        final Market market = getLiveBettingPage().getMarketByTitle(marketTitle);
        final MarketOutcome marketOutcome = market.getOutcomeByDescription(selection);
        final WaitUtils waitUtils = new WaitUtils();
        waitUtils.waitForQBMBetToPlaced(marketTitle, selection);
        final OutcomeStatus selectionStatus = marketOutcome.getStatus();
        Assert.assertEquals(selectionStatus, OutcomeStatus.ACCEPTED,
                String.format("QBM bet is placed for Selection: %s that have status : %s", selection, selectionStatus),
                String.format("QBM bet is not placed for Selection: %s that have status : %s", selection, selectionStatus));

    }
}

package internal.qaauto.inrunning.steps;

import internal.qaauto.framework.Assert;
import internal.qaauto.inrunning.StepCandidatesHelperMethods.EventStepsHelperMethods;
import internal.qaauto.inrunning.StepCandidatesHelperMethods.HelperFactory;
import internal.qaauto.inrunning.StepCandidatesHelperMethods.LiveBettingStepMethods;
import internal.qaauto.inrunning.framework.InRunningBaseStep;
import internal.qaauto.inrunning.tom.LiveBettingPage;
import internal.qaauto.inrunning.tom.Utils;
import internal.qaauto.inrunning.tom.betslip.BetSlip;
import internal.qaauto.inrunning.tom.markets.Market;
import internal.qaauto.inrunning.tom.markets.MarketOutcome;
import internal.qaauto.inrunning.utils.InRunningComponents;
import internal.qaauto.inrunning.utils.LeftNavComponents;
import internal.qaauto.sportsbook.webservice.eventpubpxp.entities.interfaces.Event;
import org.jbehave.core.annotations.*;
import org.jbehave.core.model.ExamplesTable;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;

import java.util.List;
import java.util.Map;

/**
 * Created by Harish Renukunta and Raghu Kora.
 */
public class LiveBettingPageSteps extends InRunningBaseStep {

    private static final int MARKETS_DISPLAY_WAIT_TIME = 3000;

    private static final String BETSLIP_EMPTY = "BetSlip empty";

    private static final String BETSLIP_NOT_EMPTY = "BetSlip not empty";

    private final EventStepsHelperMethods eventStepsHelperMethods = HelperFactory.getEventStepsHelper();

    private final LiveBettingStepMethods liveBettingStepMethods = HelperFactory.getLifeBettingStepMethods();

    public LiveBettingPage getLiveBettingPage() {
        return LiveBettingPageFactory.getLiveBettingPageImpl();
    }

    @Given("{player|Player} is at live betting page")
    public void givenPlayerIsAtLiveBettingPage() {
        getLiveBettingPage().go();
    }

    @When("{I|player} navigate to any In-Running page")
    @Alias("{I|player} navigate to In-Running page")
    public void navigateToInRunningPage() {
        givenPlayerIsAtLiveBettingPage();
    }

    @Then("Left Nav should have following components:$componentsToCheck")
    public void verifyLeftNavComponents(final ExamplesTable componentsToCheck) {
        String component;

        for (Map<String, String> dataRow : componentsToCheck.getRows()) {
            component = dataRow.get("Component");
            if (component.equals(LeftNavComponents.LIVE_NOW_EVENTS_COMPONENT.getLabel())) {
                liveBettingStepMethods.verifyLiveNowComponent();
            } else if (component.equals(LeftNavComponents.UPCOMING_EVENTS_COMPONENT.getLabel())) {
                liveBettingStepMethods.verifyUpcomingCouponsComponent();
            } else if (component.equals(LeftNavComponents.BETSLIP_MODE_COMPONENT)) {
                liveBettingStepMethods.verifyBetSlipModeComponent();
            } else if (component.equals(InRunningComponents.BETSLIP_COMPONENT.getLabel())) {
                liveBettingStepMethods.verifyBetSlipComponent();
            } else {
                Assert.fail(component + " not available in left nav page");
            }

        }
    }

    @Then("live bettings page should have coupon component")
    public void verifyCouponComponent() {
        liveBettingStepMethods.verifyCouponComponent();
    }

    @Given("player navigate to a Single Game View page of a Live Event $GameId")
    @When("player navigate to a Single Game View page of a Live Event $GameId")
    public void whenUserNavigateToASingleGameViewPageForALiveEvent(@Named("<GameId>") String gameId) {
        getLiveBettingPage().goToEvent(gameId);
    }

    @When("player navigates to above event")
    @Aliases(values = { "player refreshes page","user navigates to above event" })
    public void navigateToEvent() {
        final Event event = getEvent();
        whenUserNavigateToASingleGameViewPageForALiveEvent(event.getGameId());
    }

    @When("selects '<OddsFormat>' as odds format")
    public void setOddsFormat(@Named("OddsFormat") final String oddsFormat) {
        getLiveBettingPage().setOddsFormat(oddsFormat);
    }

    @Then("the list of markets of the selected event are displayed in the coupon area")
    public void verifyMarketsDisplayedForTheSelectedEvent() throws InterruptedException {
        Thread.sleep(MARKETS_DISPLAY_WAIT_TIME);
        Assert.assertEquals(eventStepsHelperMethods.getMarketsTitleFromEvent(getEvent()).size(),
                getLiveBettingPage().getMarkets().size(),
                "Expected markets are displayed in the Coupon area",
                "Expected markets are not displayed in the Coupon area");
        Assert.assertTrue(!liveBettingStepMethods.verifyMarketTitles(), "All market titles are displayed",
                "All market titles are displayed");
    }

    @Then("the market which has $MarketTitle should display 3 column layout")
    public void verify3ColumnLayoutMarketDisplay(@Named("MarketTitle") final String marketTitle) {
        final Market market = getLiveBettingPage().getMarketByTitle(marketTitle);
        market.isThreeColumnLayoutDisplayed();

    }

    @Then("the markets should display two columns layout $marketTable")
    public void verify2ColumnLayoutMarketDisplay(ExamplesTable marketTable) {
        for (Map<String, String> marketData : marketTable.getRows()) {
            for (final Map.Entry<String, String> marketName : marketData.entrySet()) {
                final String marketTitle = marketName.getValue();
                final Market market = getLiveBettingPage().getMarketByTitle(marketTitle);
                Assert.assertNotNull(market, String.format("Market is Displayed:%s", marketTitle),
                        String.format("Market is not Displayed:%s", marketTitle));
                final boolean twoColumnLayoutDisplayed = market.isTwoColumnLayoutDisplayed();
                Assert.assertTrue(twoColumnLayoutDisplayed,
                        String.format("Market is displayed with Two column Layout: %s", marketTitle),
                        String.format("Market is not displayed with Two column Layout: %s", marketTitle));
            }
        }
    }

    @Then("the bet buttons of the market which has $MarketTitle should display selection, price and $ExpectedHandicap")
    public void verifySelectionPriceHandicap(@Named("<MarketTitle>") final String marketTitle,
            @Named("ExpectedHandicap") final String expectedHandicap) {
        final Market market = getLiveBettingPage().getMarketByTitle(marketTitle);
        final List<MarketOutcome> marketOutcomes = market.getOutcomes();
        boolean isHandicapDisplayed = Boolean.FALSE;
        boolean isOutcomesDisplayed = Boolean.FALSE;
        for (MarketOutcome marketOutcome : marketOutcomes) {
            isOutcomesDisplayed = Boolean.FALSE;
            isHandicapDisplayed = Boolean.FALSE;
            if ((marketOutcome.getOutcomeDescription() != null) && (marketOutcome.getPrice() != null)) {
                isOutcomesDisplayed = Boolean.TRUE;
                if (!expectedHandicap.isEmpty()) {
                    final String handicapValue = marketOutcome.getHandicapValue();
                    if (handicapValue.equals(expectedHandicap)) {
                        isHandicapDisplayed = Boolean.TRUE;
                    } else {
                        isHandicapDisplayed = Boolean.FALSE;
                    }
                } else {
                    isHandicapDisplayed = Boolean.TRUE;
                }
            } else {
                reporter.info(String.format("Outcome is not  displayed with relevant data:%s", marketOutcome.getDescription()));
            }
        }
        Assert.assertTrue(isOutcomesDisplayed && isHandicapDisplayed, "Outcome is displayed with relevant data",
                "Outcome is not displayed with relevant data");
    }

    @When("select the event $GameId displayed in the left nav under Live now")
    public void verifyEventInLeftNav(@Named("<GameId>") final String gameId) {
        final Event event = getEvent();
        final Utils utils = new Utils();
        final String eventName = utils.getEventName(event);
        final WebElement leftNavWebElement = webDriver.findElement(By.id("live-now-events"));
        final List<WebElement> liveEvents = leftNavWebElement.findElements(By.tagName("h5"));
        for (WebElement liveEvent : liveEvents) {
            final String liveEventName = liveEvent.getText();
            if (liveEventName.equals(eventName)) {
                reporter.info(String.format("Live event is displayed in the left nav : %s", eventName));
                liveEvent.click();
                if (!webDriver.getCurrentUrl().contains(gameId)) {
                    Assert.fail("Live event is not navigated to relevant page from the Left Nav");
                }
            } else {
                reporter.info(String.format("Live event is not displayed in the Left Nav : %s", eventName));
            }
        }
    }

    @Given("HTML5 Live Client with Betslip as wager placement mode with no selections")
    public void html5LiveClientWithNoSelectionsInBetSlip() {
        LiveBettingPage liveClient = getLiveBettingPage();
        liveClient.go();
        BetSlip betSlip = liveClient.getBetSlip();
        Assert.assertTrue(betSlip.getSelectionCount() == 0, BETSLIP_EMPTY, BETSLIP_NOT_EMPTY);
    }

    @When("player add a <<Selection>> from <<MarketTitle>> to the betslip")
    public void addToToBetslip(@Named("<Selection>") final String selection,
            @Named("<MarketTitle>") final String marketTitle) {
        final Market market = getLiveBettingPage().getMarketByTitle(marketTitle);
        market.clickOnOutcomeByDescription(selection);
    }

    @When("add $Selection,$Selection2 of $MarketTitle to the betslip")
    public void addSelections(@Named("Selection") final String selection1, @Named("Selection2") final String selection2,
            @Named("<MarketTitle>") final String marketTitle) {
        final Market market = getLiveBettingPage().getMarketByTitle(marketTitle);
        market.clickOnOutcomeByDescription(selection1);
        market.clickOnOutcomeByDescription(selection2);
    }

    @Then("there will be no betting available on the $MarketTitle")
    public void verifyNoBettingAvailable(@Named("<MarketTitle>") final String marketTitle) {
        final Market market = getLiveBettingPage().getMarketByTitle(marketTitle);
        Assert.assertTrue(market.isSuspended(), String.format("No Betting available on the market:%s", marketTitle),
                String.format("Betting available on the market:%s", marketTitle));

    }

    @Then("buttons for $MarketTitle outcomes will be displayed as greyed out")
    public void verifyGreyedOutMarketOutcomes(@Named("<MarketTitle>") final String marketTitle) {
        final Market market = getLiveBettingPage().getMarketByTitle(marketTitle);
        final List<MarketOutcome> marketOutcomes = market.getOutcomes();
        boolean isGreyedOut = Boolean.FALSE;
        for (MarketOutcome marketOutcome : marketOutcomes) {
            if (marketOutcome.isGreyedOut()) {
                isGreyedOut = Boolean.TRUE;
            } else {
                isGreyedOut = Boolean.FALSE;
                break;
            }
        }
        Assert.assertTrue(isGreyedOut, "All outcomes are Greyed Out", "All outcomes are not Greyed Out");
    }
    
    @Given("a user logged in with username '<Username>' and password '<Password>'")
    public void login(@Named("Username")final String uname, @Named("Password")final String pwd) {
        getLiveBettingPage().login(uname, pwd);
    }

}

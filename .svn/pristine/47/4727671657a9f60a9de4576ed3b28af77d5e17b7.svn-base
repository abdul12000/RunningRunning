package internal.qaauto.inrunning.tom;


import internal.qaauto.sportsbook.webservice.eventpubpxp.entities.interfaces.Event;
import org.apache.commons.lang.StringUtils;
import org.jbehave.core.model.ExamplesTable;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.*;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 * @author rkora on 16/10/2014.
 */
public class Utils {

    private static final String DATETIME_PATTERN = "(.*)T(.*)Z";

    private static final String TIME_FORMAT = "HH:mm:ss";

    private static final String DATE_FORMAT = "yyyy-MM-dd";

    private static final String GAME_TIME_FORMAT = "%sT%sZ";

    public Map<String, String> getParamsFromScenarioTable(final ExamplesTable eventDataTable){
        Map<String, String> params = new HashMap<String, String>();
        int rowCount = eventDataTable.getRowCount();
        for (int row = 0; row < rowCount; row++) {
            for (String header : eventDataTable.getHeaders()) {
                String headerValue = eventDataTable.getRowAsParameters(row, true).valueAs(header, String.class);
                params.put(header, headerValue);
                if (row > rowCount) {
                    break;
                }
            }
        }
        return params;
    }

    public Map<String, String> getParamsFromExamplesTable(final ExamplesTable examplesTable, final int rowNo){
        if(rowNo > examplesTable.getRowCount()){
            return null;
        }
        Map<String, String> params = new HashMap<String, String>();
        for (String header : examplesTable.getHeaders()) {
             String headerValue = examplesTable.getRowAsParameters(rowNo, true).valueAs(header, String.class);
             params.put(header, headerValue);
        }
        return params;
    }
    public List ChangeMapToList(ExamplesTable examplesTable){
        List marketList=new ArrayList();
        for(Map<String,String> row:examplesTable.getRows()){
            String market=row.get("MarketName");
            marketList.add(market);
        }
        return marketList;

    }

    public String changeEventTime(final Event event,final int changeParameter, final int changeValue) throws ParseException {

        final Pattern pattern = Pattern.compile(DATETIME_PATTERN);
        final String gameTime = event.getGameDateUTC();
        final Matcher matches = pattern.matcher(gameTime);

        final String dateInGameTime;
        final String timeInGameTime;
        if (matches.find()) {
            dateInGameTime = matches.group(1);
            timeInGameTime = matches.group(2);
        } else {
            return StringUtils.EMPTY;
        }

        String newDate = dateInGameTime;
        String newTime = timeInGameTime;

        if ((changeParameter == Calendar.DATE) || (changeParameter == Calendar.MONTH) || (changeParameter == Calendar.YEAR)) {
            newDate = calculateNewDate(dateInGameTime, changeParameter, changeValue);
        }
        if ((changeParameter == Calendar.HOUR) || (changeParameter == Calendar.MINUTE) || (changeParameter == Calendar.SECOND)) {
            newTime = calculateNewTime(timeInGameTime, changeParameter, changeValue);
        }
        return (String.format(GAME_TIME_FORMAT, newDate, newTime));
    }

    private String calculateNewDate(final String dateToChange, final int changeParameter, final int changeValue)
            throws ParseException {
        final Calendar cal = Calendar.getInstance();
        final SimpleDateFormat dateFormatter = new SimpleDateFormat(DATE_FORMAT);
        cal.setTime(dateFormatter.parse(dateToChange));
        cal.add(changeParameter, changeValue);
        return (dateFormatter.format(cal.getTime()));
    }

    public String calculateNewTime(final String timeToChange, final int changeParameter, final int changeValue)
            throws ParseException {
        final SimpleDateFormat timeFormatter = new SimpleDateFormat(TIME_FORMAT);
        final Calendar cal = Calendar.getInstance();
        cal.setTime(timeFormatter.parse(timeToChange));
        cal.add(changeParameter, changeValue);
        return (timeFormatter.format(cal.getTime()));
    }

}

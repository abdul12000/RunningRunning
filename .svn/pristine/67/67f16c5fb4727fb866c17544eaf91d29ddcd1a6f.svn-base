package internal.qaauto.inrunning.tom.markets;

import internal.qaauto.framework.testCase.webTestsCase.BaseTestCase;
import internal.qaauto.inrunning.tom.InRunningComponent;
import internal.qaauto.inrunning.tom.LiveBettingPageInterface;
import org.apache.commons.lang.StringUtils;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;

import java.util.LinkedList;
import java.util.List;

/**
 * Created by Harish Renukunta adn rkora
 */
public class Market extends InRunningComponent implements MarketInterface {

    private static final String TITLE_SELECTOR = "h4";

    private static final String UL_TAG = "ul";

    private static final String LI_TAG = "li";

    private final static String THREE_COLUMN_SELECTOR = ".H3Columns";

    private final static String OUTCOME_SELECTOR = "button";

    private static final String LAYOUT_CSS = UL_TAG + ">" + LI_TAG;

    private static final String MARKET_EXPAND_CLASS = "";

    private static final String MARKET_COLLAPSE_CLASS = "";

    private final By threeColumnLayoutLocator = new By.ByCssSelector(LAYOUT_CSS);

    private final By twoColumnLayoutLocator = new By.ByCssSelector(UL_TAG);

    private final By titleLocator = new By.ByCssSelector(TITLE_SELECTOR);

    private final By outcomeLocator = new By.ByTagName(OUTCOME_SELECTOR);

    private final By threeColumnLocator = new By.ByCssSelector(THREE_COLUMN_SELECTOR);

    protected LiveBettingPageInterface liveCoupon;

    private boolean threeColumnLayout;

    public Market(final WebElement market) {
        setComponent(market);
        threeColumnLayout = isThreeColumnLayout();
    }

    private boolean isThreeColumnLayout() {
        final List<WebElement> webElements = getWebElement().findElements(threeColumnLocator);
        if (webElements != null && webElements.size() != 0) {
            return Boolean.TRUE;
        }
        return Boolean.FALSE;
    }

    @Override
    public String getMarketTitle() {
        final List<WebElement> marketTitle = getWebElement().findElements(titleLocator);
        if (marketTitle.isEmpty()) {
            return StringUtils.EMPTY;
        }
        return marketTitle.get(0).getText();
    }

    @Override
    public List<OutcomeInterface> getOutcomes() {
        final List<WebElement> marketOutcomeWebElements = getWebElement().findElements(outcomeLocator);
        if (marketOutcomeWebElements.size() == 0) {
            return null;
        }
        final List<OutcomeInterface> marketOutcomes = new LinkedList<OutcomeInterface>();
        for (WebElement marketOutcomeWebElement : marketOutcomeWebElements) {
            marketOutcomes.add(new Outcome(marketOutcomeWebElement));
        }
        return marketOutcomes;
    }

    @Override
    public OutcomeInterface getOutcomeByPosition(int pos) {
        List<OutcomeInterface> marketOutcomes = getOutcomes();
        if (marketOutcomes.size() == 0) {
            return null;
        }
        return marketOutcomes.get(pos);
    }

    @Override
    public OutcomeInterface getOutcomeByDescription(final String desc) {
        List<OutcomeInterface> marketOutcomes = getOutcomes();
        for (OutcomeInterface outcome : marketOutcomes) {
            if (outcome.getOutcomeDescription().equals(desc)) {
                return outcome;
            }
        }
        return null;
    }

    @Override
    public void clickOnOutcomeByDescription(final String desc) {
        List<OutcomeInterface> marketOutcomes = getOutcomes();
        if (marketOutcomes == null) {
            BaseTestCase.reporter.info("Outcome is not Displayed");
        }
        for (OutcomeInterface outcome : marketOutcomes) {
            if (outcome.getOutcomeDescription().equals(desc)) {
                outcome.getWebElement().click();
            }
        }
    }

    @Override
    public void collapse() {
        if (!isCollapsed()) {
            final List<WebElement> marketTitle = getWebElement().findElements(titleLocator);
            if (marketTitle != null && marketTitle.size() != 0) {
                marketTitle.get(0).click();
            }
        }
    }

    @Override
    public void expand() {
        if (isCollapsed()) {
            final List<WebElement> markets = getWebElement().findElements(titleLocator);
            if (markets.size() != 0) {
                markets.get(0).click();
            }
        }
    }

    @Override
    public boolean isCollapsed() {
        if (MARKET_COLLAPSE_CLASS.equals(getChildWebElement(titleLocator).getCssValue("class"))) {
            return true;
        }
        return false;
    }

    @Override
    public boolean isSuspended() {
        if (MARKET_EXPAND_CLASS.equals(getChildWebElement(titleLocator).getCssValue("class"))) {
            return true;
        }
        return false;
    }

    @Override
    public boolean isTwoColumnLayoutDisplayed() {
        int columnSize = getWebElement().findElements(twoColumnLayoutLocator).size();
        boolean columnLayout = Boolean.FALSE;
        if (columnSize == 2) {
            columnLayout = Boolean.TRUE;
        } else {
            BaseTestCase.reporter.info("Two Column layout is not displayed");
        }
        return columnLayout;
    }

    @Override
    public boolean isThreeColumnLayoutDisplayed() {
        int columnSize = getWebElement().findElements(threeColumnLayoutLocator).size();
        boolean columnLayout = Boolean.FALSE;
        if (columnSize == 3) {
            columnLayout = Boolean.TRUE;
        } else {
            BaseTestCase.reporter.info("Three Column layout is not displayed");
        }
        return columnLayout;
    }

    @Override
    public boolean isColumnLayoutDisplayed(final String columnLayout) {

         boolean columnLayoutDisplayed = Boolean.FALSE;
        if (getWebElement().findElements(By.cssSelector("ul." + columnLayout)).size() != 0) {
            columnLayoutDisplayed = getWebElement().findElement(By.cssSelector("ul." + columnLayout)).isDisplayed();
        }

        return columnLayoutDisplayed;
    }

}

package internal.qaauto.inrunning.steps;

import internal.qaauto.framework.Assert;
import internal.qaauto.inrunning.StepCandidatesHelperMethods.HelperFactory;
import internal.qaauto.inrunning.StepCandidatesHelperMethods.LeftNavEventStepsHelperMethods;
import internal.qaauto.inrunning.framework.InRunningBaseStep;
import internal.qaauto.inrunning.tom.Utils;
import internal.qaauto.inrunning.tom.coupons.LeftNavEventInterface;
import internal.qaauto.inrunning.tom.coupons.LeftNavUpcomingEventInterface;
import internal.qaauto.inrunning.tom.leftnav.UpcomingEventsComponentInterface;
import internal.qaauto.inrunning.tom.markets.MarketInterface;
import internal.qaauto.inrunning.tom.markets.OutcomeInterface;
import internal.qaauto.sportsbook.webservice.eventpubpxp.entities.interfaces.Event;
import org.jbehave.core.annotations.Aliases;
import org.jbehave.core.annotations.Named;
import org.jbehave.core.annotations.Then;

import java.util.List;

/**
 * Created by Harish Renukunta on 21/10/2014.
 */
public class LeftNavEventSteps extends InRunningBaseStep {

    private static final String UPCOMING_COUPON_WITH_TITLE_DISPLAYED = "Upcoming coupon displayed with title.Coupon name %s";

    private static final String UPCOMING_COUPON_WITH_TITLE_NOT_DISPLAYED = "Upcoming coupon not found with title %s";

    private final static String UPCOMING_EVENT_TIME_MATCH = "Upcoming event time match. Event time:%s";

    private final static String UPCOMING_EVENT_TIME_MISMATCH = "Upcoming event time mismatch. Expected:%s Actual:%s";

    private LeftNavEventStepsHelperMethods couponStepsHelper = HelperFactory.getCouponStepsHelper();

    @Then("Event name in Live Now link will be displayed in the top row of the link as '<<AwayTeam NickName>>@<<HomeTeam NickName>>'")
    @Aliases(values = {
            "Event name in Live Now link will be displayed in the top row of the link as '<<HomeTeam NickName>>vs<<AwayTeam NickName>>'" })
    public void verifyLiveNowCouponByTitle() {
        final Event event = getEvent();
        final Utils utils = new Utils();
        final String eventTitle = utils.getEventName(event);
        couponStepsHelper.verifyLiveNowEventExist(event.getSport(), eventTitle);
    }

    @Then("Event Name in Upcoming events will be displayed in the top row as '<<AwayTeam NickName>> <Team Separator> <<HomeTeam NickName>>'")
    public void verifyUpcomingEventNameUSFormat(@Named("<AwayTeam NickName>") final String awayTeamShortName,
            @Named("Team Separator") final String teamSeparator, @Named("<HomeTeam NickName>") final String homeTeamShortName) {
        final Event event = getEvent();
        final String couponName = String.format("%s %s %s", awayTeamShortName, teamSeparator, homeTeamShortName);
        LeftNavUpcomingEventInterface upcomingCoupon = couponStepsHelper.getLeftNavUpcomingCouponByTitle(couponName);
        Assert.assertNotNull(upcomingCoupon, String.format(UPCOMING_COUPON_WITH_TITLE_DISPLAYED, couponName),
                String.format(UPCOMING_COUPON_WITH_TITLE_NOT_DISPLAYED, couponName));
    }

    @Then("Event Name in Upcoming events will be displayed in the top row as '<<HomeTeam NickName>><Team Separator><<AwayTeam NickName>>'")
    public void verifyUpcomingCouponTitleInEuropeanFormatEvent(@Named("<AwayTeam NickName>") final String awayTeamShortName,
            @Named("Team Separator") final String teamSeparator, @Named("<HomeTeam NickName>") final String homeTeamShortName) {
        final Event event = getEvent();
        final String couponName = String.format("%s %s %s", homeTeamShortName, teamSeparator, awayTeamShortName);
        LeftNavUpcomingEventInterface upcomingCoupon = couponStepsHelper.getLeftNavUpcomingCouponByTitle(couponName);
        Assert.assertNotNull(upcomingCoupon, String.format(UPCOMING_COUPON_WITH_TITLE_DISPLAYED, couponName),
                String.format(UPCOMING_COUPON_WITH_TITLE_NOT_DISPLAYED, couponName));
    }

    @Then("price displayed for all outcomes of market <<MarketName>> in coupon area should be <OddsDisplayed>")
    public void verifyOddsOfAllOutcomes(@Named("<MarketName>") final String marketName,
            @Named("OddsDisplayed") final String expectedOdd) {
        final MarketInterface market = getLiveBettingPage().getMarketByTitle(marketName);
        List<OutcomeInterface> outcomes = market.getOutcomes();
        for (OutcomeInterface outcome : outcomes) {
            couponStepsHelper.verifyOddsOfOutcome(outcome, expectedOdd);
        }
    }

    @Then("above created upcoming event displays time in 12h clock and time to start in hours and minutes(Starts in HHh MMm)")
    public void verifyUpcomingEventDisplays12hClock() {
        final Utils utils = new Utils();
        final Event event = getEvent();
        final String eventName = utils.getEventName(event);
        final UpcomingEventsComponentInterface leftNavEventComponent = getLiveBettingPage().getUpcomingEventsComponent();
        final LeftNavEventInterface leftNavEvent = leftNavEventComponent.getLeftNavEventByName(eventName, event.getSport());
        final String leftNavEventTime = leftNavEvent.getTime();
        final String appTimeZone = getLiveBettingPage().getTimeZone();
        final String startTimeFromEvent = utils.getStartTimeFromEvent(event, appTimeZone);
        final String eventTimeToStartFromEvent = utils.getTimeToStartFromEvent(event, appTimeZone);
        final String expectedUpcomingEventTimeLabel = startTimeFromEvent + " Starts in " + eventTimeToStartFromEvent;
        Assert.assertEquals(expectedUpcomingEventTimeLabel, leftNavEventTime,
                String.format(UPCOMING_EVENT_TIME_MATCH, leftNavEventTime),
                String.format(UPCOMING_EVENT_TIME_MISMATCH, expectedUpcomingEventTimeLabel,
                        leftNavEventTime));
    }
}

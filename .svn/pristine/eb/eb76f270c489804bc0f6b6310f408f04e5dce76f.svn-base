package internal.qaauto.inrunning.StepCandidatesHelperMethods;

import internal.qaauto.framework.Assert;
import internal.qaauto.inrunning.framework.InRunningBaseStep;
import internal.qaauto.inrunning.tom.LiveBettingPage;
import internal.qaauto.inrunning.tom.markets.Market;
import internal.qaauto.inrunning.tom.markets.MarketOutcome;
import internal.qaauto.inrunning.utils.WaitUtils;
import org.apache.commons.configuration.ConfigurationException;

import java.io.IOException;
import java.util.List;

/**
 * Created by Harish Renukunta on 03/11/2014.
 */
public class CouponAreaStepsHelperMethods extends InRunningBaseStep {

    private static final String MARKET_NOT_DISPLAYED = "Market %s not displayed";

    private static final String MARKET_DISPLAYED = "Market %s displayed";

    private static final String MARKET_NOT_FOUND = "Market %s not found";

    private static final String MARKET_FOUND = "Market %s found";

    private static final String MARKET_SUSPENDED = "Market '%s' suspended";

    private static final String MARKET_NOT_SUSPENDED = "Market '%s' not suspended";

    private static final String TEST_OUTCOME_A = "TestOutcomeA";

    private static final String TEST_OUTCOME_E = "TestOutcomeE";

    private static final String TEST_OUTCOME_B = "TestOutcomeB";

    private static final String TEST_OUTCOME_F = "TestOutcomeF";

    private static final String TEST_OUTCOME_C = "TestOutcomeC";

    private static final String TEST_OUTCOME_G = "TestOutcomeG";

    private static final String TEST_OUTCOME_D = "TestOutcomeD";

    private static final String HOME = "HOME";

    private static final String DRAW = "Draw";

    private static final String AWAY = "AWAY";

    private static final String V2_COLUMNS = "V2Columns";

    private static final String H2_COLUMNS = "H2Columns";

    private static final String H3_COLUMNS = "H3Columns";

    private static final String V3_COLUMNS = "V3Columns";

    private static final String CORRECT_SCORE = "CorrectScore";

    private static final String TIME_SORTED = "TimeSorted";

    private static final String H2_COLUMNS_HA = "H2Columns-HA";

    private static final String OUTCOME_FOUND = "Outcome '%s' found";

    private static final String OUTCOME_NOT_FOUND = "Outcome '%s' not found";

    public void verifyMarketsExistInCouponArea(final List<String> marketsTitle) {
        for (final String marketTitle : marketsTitle) {
            verifyMarketExistInCouponArea(marketTitle);
        }
    }

    public Market verifyMarketExistInCouponArea(final String marketTitle) {
        final WaitUtils waitUtils = new WaitUtils();
        waitUtils.waitForMarketToDisplayInCoupon(getLiveBettingPage(),
                marketTitle);
        final Market market = getLiveBettingPage()
                .getMarketByTitle(marketTitle);
        Assert.assertNotNull(market, String.format(MARKET_FOUND, marketTitle),
                String.format(MARKET_NOT_FOUND, marketTitle));
        return market;
    }

    public void verifyMarketNotVisibleInCouponArea(final String marketTitle)
            throws ConfigurationException, IOException {
        final WaitUtils waitUtils = new WaitUtils();
        waitUtils.waitForMarketWithTitleToDisappear(marketTitle);
        Assert.assertTrue(
                getLiveBettingPage().getMarketByTitle(marketTitle) == null,
                String.format(MARKET_NOT_DISPLAYED, marketTitle),
                String.format(MARKET_DISPLAYED, marketTitle));
    }

    public Market verifyMarketDisplayed(final String marketTitle) {
        final WaitUtils waitUtils = new WaitUtils();
        waitUtils.waitForMarketToDisplayInCoupon(getLiveBettingPage(),
                marketTitle);
        final Market market = getLiveBettingPage()
                .getMarketByTitle(marketTitle);
        Assert.assertNotNull(market, String.format(
                "Market with market title:%s is Displayed",
                market.getMarketTitle()), String.format(
                "Market with market title:%s is not Displayed",
                market.getMarketTitle()));
        return market;
    }

    public void verifyMarketColumnLayout(final String columnName,
            final Market market) {
        List<MarketOutcome> marketOutcomes = market.getOutcomes();
        String[] outcomes = null;
        switch (columnName) {
        case V2_COLUMNS:
            outcomes = new String[] { TEST_OUTCOME_A, TEST_OUTCOME_E,
                    TEST_OUTCOME_B, TEST_OUTCOME_F, TEST_OUTCOME_C,
                    TEST_OUTCOME_G, TEST_OUTCOME_D };
            break;
        case H2_COLUMNS:
            outcomes = new String[] { TEST_OUTCOME_A, TEST_OUTCOME_B,
                    TEST_OUTCOME_C, TEST_OUTCOME_D, TEST_OUTCOME_E,
                    TEST_OUTCOME_F, TEST_OUTCOME_G };
            break;
        case H3_COLUMNS:
            outcomes = new String[] { TEST_OUTCOME_A, TEST_OUTCOME_B,
                    TEST_OUTCOME_C, TEST_OUTCOME_D, TEST_OUTCOME_E,
                    TEST_OUTCOME_F, TEST_OUTCOME_G };
            break;
        case V3_COLUMNS:
            outcomes = new String[] { TEST_OUTCOME_A, TEST_OUTCOME_D,
                    TEST_OUTCOME_G, TEST_OUTCOME_B, TEST_OUTCOME_E,
                    TEST_OUTCOME_C, TEST_OUTCOME_F };
            break;
        case CORRECT_SCORE:
            outcomes = new String[] { HOME, DRAW, AWAY };
            break;
        case TIME_SORTED:
            outcomes = new String[] { TEST_OUTCOME_A, TEST_OUTCOME_B,
                    TEST_OUTCOME_C, TEST_OUTCOME_D, TEST_OUTCOME_E,
                    TEST_OUTCOME_F, TEST_OUTCOME_G };
            break;
        case H2_COLUMNS_HA:
            outcomes = new String[] { getEvent().getAwayTeamNickname(),
                    getEvent().getHomeTeamNickname() };
            break;

        }
        int count = 0;
        final int outcomeCount = marketOutcomes.size();
        for (int i = 0; i < outcomeCount; i++) {
            final String marketOutcomeText = market.getOutcomeByPosition(i)
                    .getOutcomeDescription();
            if (outcomes[i].equals(marketOutcomeText)) {
                count++;
            } else {
                reporter.info(String.format("%s : outcome is not displayed",
                        marketOutcomeText));
            }
        }
        Assert.assertEquals(
                outcomeCount,
                count,
                String.format("Relevant Outcomes are displayed",
                        market.getMarketTitle()),
                String.format("Relevant Outcomes are not displayed",
                        market.getMarketTitle()));
    }

    public void verifyMarketWithTitleSuspended(final String marketTitle)
            throws ConfigurationException, IOException {
        final WaitUtils waitUtils = new WaitUtils();
        waitUtils.waitForMarketWithTitleSuspended(marketTitle);
        final Market market = getLiveBettingPage()
                .getMarketByTitle(marketTitle);
        Assert.assertTrue(market.isSuspended(),
                String.format(MARKET_SUSPENDED, marketTitle),
                String.format(MARKET_NOT_SUSPENDED, marketTitle));
    }

    public void verifyMarketWithTitleUnSuspended(final String marketTitle)
            throws ConfigurationException, IOException {
        final WaitUtils waitUtils = new WaitUtils();
        waitUtils.waitForMarketWithTitleUnSuspended(marketTitle);
        final Market market = getLiveBettingPage()
                .getMarketByTitle(marketTitle);
        Assert.assertFalse(market.isSuspended(),
                String.format(MARKET_NOT_SUSPENDED, marketTitle),
                String.format(MARKET_SUSPENDED, marketTitle));
    }

    public void verifyOutcomeWithDescriptionNoDisplay(final String marketTitle,
            final String outcomeDesc) throws ConfigurationException,
            IOException {
        final LiveBettingPage page = getLiveBettingPage();
        final internal.qaauto.inrunning.utils.WaitUtils waitUtils = new WaitUtils();
        waitUtils.waitForOutcomeToDisappear(marketTitle, outcomeDesc);
        final Market market = page.getMarketByTitle(marketTitle);
        final MarketOutcome marketOutcome = market
                .getOutcomeByDescription(outcomeDesc);
        Assert.assertTrue(marketOutcome == null,
                String.format(OUTCOME_NOT_FOUND, outcomeDesc),
                String.format(OUTCOME_FOUND, outcomeDesc));
    }

    public void verifyOutcomeWithDescriptionDisplays(final String marketTitle,
            final String outcomeDesc) throws ConfigurationException,
            IOException {
        final LiveBettingPage page = getLiveBettingPage();
        final internal.qaauto.inrunning.utils.WaitUtils waitUtils = new WaitUtils();
        waitUtils.waitForOutcomeToDisplay(marketTitle, outcomeDesc);
        final Market market = page.getMarketByTitle(marketTitle);
        final MarketOutcome marketOutcome = market
                .getOutcomeByDescription(outcomeDesc);
        Assert.assertTrue(marketOutcome != null,
                String.format(OUTCOME_FOUND, outcomeDesc),
                String.format(OUTCOME_NOT_FOUND, outcomeDesc));
    }

    public int getHandicapCount(final String expectedHandicapValue, final String marketTitle) {
        verifyMarketDisplayed(marketTitle);
        final WaitUtils waitUtils = new WaitUtils();
        waitUtils.waitForHandicapUpdate(expectedHandicapValue, marketTitle);
        final Market market = getLiveBettingPage().getMarketByTitle(marketTitle);
        final List<MarketOutcome> marketOutcomes = market.getOutcomes();
        int count = 0;
        for (MarketOutcome marketOutcome : marketOutcomes) {
            if (marketOutcome.getHandicapValue().equals(expectedHandicapValue)) {
                count++;
            } else {
                reporter.info(String.format("Handicap is not updated for market Outcome :%s", marketOutcome.getDescription()));
            }
        }
        return count;
    }
}
